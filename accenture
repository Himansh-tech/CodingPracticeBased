//Question: 
/**
The String Decoder :
You are provided with a string which has a sequence of 1s and Os. This sequence is the encoded version of a english word. You are supposed to write a program to
decode the provided string and find the original word.
Each Alphabet is representing by a sequence of 1s.
A:1 B:11
C: 111
D: 1111
E : 11111
F: 111111
**/

/CODE
import java.util.*;

class decode{
    public static String decod(String str){
        
        String arr[] = str.split("0");  
        StringBuilder sb = new StringBuilder();

        for(int i=0;i<arr.length;i++){
            int len = arr[i].length();
            char ch = (char)(64+len);
            sb.append(ch);
        }

        return sb.toString();
    }
}

public class main {
    public static void main(String[] args) {
        
        String str = "1111111111111110";
        String ans = decode.decod(str);
        System.out.println(ans);
    }

};





//Question:
// A googly prime number is defined as a number that is derived from the sum of its individual digits. For example, if N = 43, the sum of its individual digits is 4+3 = 7, which is prime making it a googly prime number.
// Your task is to find whether the current number is googly prime number or not.

//CODE
import java.util.*;

class googly{
    public static String prime(long n){
        long num = 0;
        while(n!=0){
            num = num + (n % 10);
            n = n / 10;
        }
        for(int i=2;i<Math.sqrt(num);i++){
            if(num % i == 0){
                return "No";
            }
        }
        return "Yes";
    }
}

public class main {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        long n = sc.nextInt();
        String val = googly.prime(n);
        System.out.println(val);
    }
}

//Write a program that takes four integers as input and outputs the sum of all negative integers. If there are no negative integers, the output should be 0.
Example Test Case:
• Input:
° a = -3
• b = 7
° c = -1
• d = 4
• Output:
° -4


//code

import java.util.*;
public class Solution {
    public int fun(int a,int b,int c,int d){
        int val = 0;
        if(a>=0 && b>=0 && c>=0 && d>=0){
            return 0;
        }
        else{
            if(a<0){
                val += a;
            }
            if(b<0){
                val += b;
            }
            if(c<0){
                val += c;
            }
            if(d<0){
                val += d;
            }
        }
        return val;
    }
public static void main(String[] args) {
    Solution obj = new Solution();
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    for(int i=0;i<t;i++){
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();

        System.out.println(obj.fun(a, b, c, d));
    }
}
    
}


//Objective: Write a program that takes an array arr of length n, 
filters out the negative numbers, and then prints the median of the remaining array. If there are two mid-
indices, print the element at the smaller index. 

Example Test Case:
Input:
arr = [7, -3, 8, 2, -5, 10, 12]
Output:
8

//code

import java.util.*;
public class Solution {
    public int fun(int arr[], int len){
        int count = 0;
        for(int i=0;i<len;i++){
            if(arr[i]>0){
                count++;
            }
        }
        if(count == 0){
            return 0;
        }
        int ans[] = new int[count];
        int j = 0;
        for(int i=0;i<len;i++){
            if(arr[i]>0){
                ans[j]=arr[i];
                j++;
            }
        }

        Arrays.sort(ans);
        if(count %2 != 0){
            return ans[count/2];
        }
        else{
            return ans[(count/2)-1];
        }

    }
    public static void main (String[] args){
        Solution obj = new Solution();
        Scanner sc = new Scanner(System.in);
        int t= sc.nextInt();
        for(int i=0;i<t;i++){
            int len = sc.nextInt();
            int arr[] = new int[len];
            for(int j=0;j<len;j++){
                arr[j] = sc.nextInt();
            }
        System.out.println(obj.fun(arr, len));
        }
        
    }
}

//Problem Statement:
Write a function that takes an integer n as input and returns the sum of all prime numbers less than n.

Input: 10
Output: 17

Explanation:
The prime numbers less than 10 are 2,
3, 5, and 7.
Their sum is 17.


//code


import java.util.*;
public class Solution {

    public boolean isPrime(int n){
        for(int i=2;i<=Math.sqrt(n);i++){
            if(n%i == 0){
                return false;
            }
        }
        return true;
    }


    public int fun(int tillNum){
        int sum = 0;
        for(int i=2;i<tillNum;i++){
            if(isPrime(i)){
                sum = sum + i;
            }
        }
        return sum;
    }


    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        Solution obj = new Solution();
        int t = sc.nextInt();
        for(int i=0;i<t;i++){
            int tillNum = sc.nextInt();
            System.out.println(obj.fun(tillNum));
        }
    }
}
